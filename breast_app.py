import os
import numpy as np
from flask import Flask, request, jsonify, send_file
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from flask_cors import CORS
from fpdf import FPDF
from datetime import datetime

app = Flask(__name__)
CORS(app)  # Enable Cross-Origin Requests

# Load the trained model
MODEL_PATH = r"E:\Murphy_Model\final_files\models\boba.h5"
model = load_model(MODEL_PATH)

# Define class labels
CLASS_LABELS = ["benign", "malignant", "normal"]

UPLOAD_FOLDER = 'uploads'
REPORT_FOLDER = 'reports'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['REPORT_FOLDER'] = REPORT_FOLDER

# Ensure necessary folders exist
for folder in [UPLOAD_FOLDER, REPORT_FOLDER]:
    if not os.path.exists(folder):
        os.makedirs(folder)


def preprocess_image(img_path, image_size=(224, 224)):
    """Preprocesses an image for model prediction."""
    try:
        img = image.load_img(img_path, target_size=image_size)
        img_array = image.img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
        return img_array
    except Exception as e:
        print(f"Error in preprocessing image: {str(e)}")
        raise


def generate_pdf_report(image_path, result, confidence, filename):
    """Generates a detailed PDF report with prediction details and medical disclaimers."""
    try:
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        # First Page - Cover
        pdf.add_page()
        pdf.set_font("Arial", 'B', size=24)
        pdf.cell(200, 20, "Medical Image Analysis Report", ln=True, align='C')
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, f"Report Generated: {datetime.now().strftime('%B %d, %Y %H:%M:%S')}", ln=True, align='C')
        pdf.cell(200, 10, f"Case ID: {filename}", ln=True, align='C')

        # Disclaimer
        pdf.ln(20)
        pdf.set_font("Arial", 'I', size=10)
        pdf.multi_cell(190, 5,
                       "DISCLAIMER: This report is generated by an AI-based analysis system. The results should be reviewed by a qualified healthcare professional. This tool is designed to assist in diagnosis but should not be used as the sole basis for medical decisions.",
                       align='L')

        # Second Page - Analysis Details
        pdf.add_page()
        pdf.set_font("Arial", 'B', size=16)
        pdf.cell(200, 10, "Analysis Details", ln=True, align='L')

        # Image Information
        pdf.ln(5)
        pdf.set_font("Arial", 'B', size=14)
        pdf.cell(200, 10, "1. Image Information", ln=True, align='L')
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, f"Filename: {os.path.basename(image_path)}", ln=True, align='L')
        pdf.cell(200, 10, f"Analysis Date: {datetime.now().strftime('%B %d, %Y')}", ln=True, align='L')
        pdf.cell(200, 10, f"Analysis Time: {datetime.now().strftime('%H:%M:%S')}", ln=True, align='L')

        # Image Display
        pdf.ln(5)
        if os.path.exists(image_path):
            pdf.image(image_path, x=10, y=None, w=100)
            pdf.ln(110)  # Space for image
        else:
            pdf.cell(200, 10, "Error: Image not found", ln=True, align='L')

        # Analysis Results
        pdf.set_font("Arial", 'B', size=14)
        pdf.cell(200, 10, "2. Analysis Results", ln=True, align='L')


        # Result with color coding and detailed explanation
        result_colors = {
            'benign': (0, 128, 0),  # Green
            'malignant': (255, 0, 0),  # Red
            'normal': (0, 0, 255)  # Blue
        }

        result_descriptions = {
            'benign': "A benign classification suggests the presence of a non-cancerous abnormality. While not immediately threatening, regular monitoring may be recommended.",
            'malignant': "A malignant classification suggests the presence of potentially cancerous characteristics. Immediate consultation with a healthcare provider is strongly recommended.",
            'normal': "A normal classification suggests no significant abnormalities were detected in the analyzed image."
        }

        color = result_colors.get(result.lower(), (0, 0, 0))
        pdf.set_text_color(*color)
        pdf.set_font("Arial", 'B', size=14)
        pdf.cell(200, 10, f"Classification: {result.upper()}", ln=True, align='L')
        pdf.set_text_color(0, 0, 0)  # Reset to black

        # Confidence Score
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, f"Confidence Score: {confidence}", ln=True, align='L')

        # Result Description
        pdf.ln(5)
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(190, 5, result_descriptions.get(result.lower(), ""), align='L')

        # Technical Details
        pdf.ln(10)
        pdf.set_font("Arial", 'B', size=14)
        pdf.cell(200, 10, "3. Technical Information", ln=True, align='L')
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(190, 5,
                       "Analysis performed using deep learning-based image classification model trained on medical imaging datasets. The model analyzes visual patterns and features to categorize the image into predefined classes.",
                       align='L')

        # Recommendations
        pdf.ln(10)
        pdf.set_font("Arial", 'B', size=14)
        pdf.cell(200, 10, "4. Recommendations", ln=True, align='L')
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(190, 5,
                       "1. Review this report with your healthcare provider\n2. Discuss any concerns or questions about the results\n3. Follow your healthcare provider's recommendations for any additional testing or monitoring\n4. Keep this report for your medical records",
                       align='L')

        # Footer with Additional Disclaimers
        pdf.ln(20)
        pdf.set_font("Arial", 'I', size=8)
        pdf.multi_cell(190, 4,
                       "This report is generated automatically and should be interpreted by qualified medical professionals. The analysis is based on machine learning algorithms and should be used as a supporting tool, not as a replacement for professional medical judgment. Regular medical check-ups and consultations are essential for proper healthcare management.",
                       align='L')

        # Save PDF
        report_path = os.path.join(app.config['REPORT_FOLDER'], f"{filename}.pdf")
        pdf.output(report_path)
        return report_path

    except Exception as e:
        print(f"Error generating PDF: {str(e)}")
        raise


@app.route('/predict', methods=['POST'])
def predict():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file uploaded"}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400

        # Save uploaded file
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)

        try:
            # Preprocess image
            img_array = preprocess_image(file_path)

            # Make prediction
            predictions = model.predict(img_array)
            predicted_class = np.argmax(predictions, axis=1)[0]
            result = CLASS_LABELS[predicted_class]
            confidence = f"{np.max(predictions) * 100:.2f}%"

            # Generate PDF Report
            pdf_filename = os.path.splitext(file.filename)[0]
            pdf_path = generate_pdf_report(file_path, result, confidence, pdf_filename)

            # Clean up
            if os.path.exists(file_path):
                os.remove(file_path)

            return jsonify({
                "prediction": result,
                "confidence": confidence,
                "report_name": f"{pdf_filename}.pdf"
            })

        except Exception as e:
            # Clean up on error
            if os.path.exists(file_path):
                os.remove(file_path)
            raise e

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/download_report/<filename>', methods=['GET'])
def download_report(filename):
    """Allows the user to download the generated PDF report."""
    try:
        report_path = os.path.join(app.config['REPORT_FOLDER'], filename)
        if os.path.exists(report_path):
            return send_file(report_path, as_attachment=True)
        else:
            return jsonify({'error': 'Report not found'}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000, debug=True)